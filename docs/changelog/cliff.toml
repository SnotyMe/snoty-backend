# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
header = "<!-- IMPORTANT: fix incorrect usernames in the changelog!! -->"
body = """
{%- if version -%}
    {% if previous.version %}
        # [{{ version | trim_start_matches(pat="v") }}]({{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}
        # [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}
{%- else -%}
    # [unreleased]
{%- endif %}
## Backend
{% for group, commits in commits | group_by(attribute="group") %}
    {%- if commits | filter(attribute="scope", value="deps") | length == commits | length -%}{% break %}{%- endif -%}
    ### {{ group | striptags | trim | upper_first }}
    {%- for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") -%}
        {%- if commit.scope == "deps" -%}{% continue %}{%- endif -%}
        {%- if commit.scope | truncate(length=1) == commit.scope | upper | truncate(length=1) -%}{% continue %}{%- endif %}
        - {% if commit.breaking %}[**breaking**] {% endif %}**{{commit.scope}}**: \
            {{ commit.message }} - by @{{ commit.author.name }} in {{ commit.id }}
    {%- endfor %}
    {% for commit in commits -%}
        {%- if not commit.scope -%}
            - {% if commit.breaking %}[**breaking**] {% endif %}\
                {{ commit.message }} - by @{{ commit.author.name }} in {{ commit.id }}
        {% endif -%}
    {%- endfor -%}
    {%- if commits | filter(attribute="scope", value="deps") | length > 0 %}
        ### Dependencies
        {%- for commit in commits | filter(attribute="scope", value="deps") %}
            - {% if commit.breaking %}[**breaking**] {% endif %}\
                {{ commit.message }} - {{ commit.id }}
        {%- endfor %}
    {%- endif %}
    {%- if loop.last %}{% else %}\n{% endif %}\
{% endfor %}\n
## Nodes
{% for scope, commits in commits | group_by(attribute="scope") %}
    {%- if scope | truncate(length=1) != scope | upper | truncate(length=1) -%}{% continue %}{%- endif %}
    ### {{ scope }}
    {%- for commit in commits %}
        - {% if commit.breaking %}[**breaking**] {% endif %}**{{commit.group}}**: \
            {{ commit.message }} - by @{{ commit.author.name }} in {{ commit.id }}
    {%- endfor %}
{% endfor %}
"""

# Remove leading and trailing whitespaces from the changelog's body.
trim = true

[git]
# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = true
# Exclude commits that do not match the conventional commits specification.
filter_unconventional = false
# Split commits on newlines, treating each line as an individual commit.
split_commits = false
# An array of regex based parsers for extracting data from the commit message.
# Assigns commits to groups.
# Optionally sets the commit's scope and can decide to exclude commits from further processing.
commit_parsers = [
    { message = "^feat", group = "Features" },
    { message = "^fix", group = "Bug Fixes" },
    { message = "^doc", group = "Documentation" },
    { message = "^perf", group = "Performance" },
    { message = "^refactor", group = "Refactoring" },
    { message = "^style", group = "Style" },
    { message = "^revert", group = "Revert" },
    { message = "^test", group = "Tests" },
    { message = "^chore\\(version\\):", skip = true },
    { message = "^chore", group = "Miscellaneous Chores" },
    { body = ".*security", group = "Security" },
]
# Exclude commits that are not matched by any commit parser.
filter_commits = false
# Order releases topologically instead of chronologically.
topo_order = false
# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "oldest"
